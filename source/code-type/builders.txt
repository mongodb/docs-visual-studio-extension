.. _mongodb-analyzer-analyze-builders:

============================
Analyze Builders Expressions
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

A **builder** is a class provided by the {+driver-short+} to help you construct
common operations like queries and updates.

To learn more about builders, see 
`Builders <{+driver-docs+}reference/driver/definitions/>`__ in the
{+driver-short+} documentation.

Translate into the {+query-api+}
--------------------------------

Use the {+product+} to translate your builder expressions into the {+query-api+}.
Click the following tabs to see an example of a builder expression
and its corresponding {+query-api+} translation:

.. tabs::

   .. tab:: Builders
      :tabid: builder

      .. code-block:: csharp

         var filter = Builders<Movie>.Filter.Eq(m => m.Genre, genre) &
             Builders<Movie>.Filter.Gte(m => m.Score, minScore) &
             Builders<Movie>.Filter.Regex(m => m.Score, titleSearchTerm);

   .. tab:: {+query-api+}
      :tabid: query-api-builders

      .. code-block:: json

         {
           "$and": [ { "Genre": genre },
             { "Score": { "$gte": minScore } },
             { "Score": /titleSearchTerm/ } ]
         }

.. include:: /includes/variable-names.rst

Analyze Builders in Visual Studio
---------------------------------

To analyze your builder expressions in Visual Studio, perform the following actions:

1. Install the {+product+} as described in the :ref:`Install <mongodb-analyzer-install>`
   guide.
#. Write a builder expression with the {+driver-short+}
#. Move your mouse over the :guilabel:`...` annotation beneath the first
   method of your builder expression to display an information message that contains
   the {+query-api+} translation.

Simple Builder Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~

Click the following tabs to see a builder expression with and without an
information message displayed:

.. tabs::

   .. tab:: Without Information Message
      :tabid: no-message

      .. figure:: /includes/images/builder.png
         :alt: Screenshot of builder expression in visual studio with ellipsis annotation.

   .. tab:: With Information Message
      :tabid: message

      .. figure:: /includes/images/builder-popup-photoshop.png
         :alt: Screenshot of builder expression in visual studio with information message displayed.

Track Builder Variables
~~~~~~~~~~~~~~~~~~~~~~~

The {+product+} supports builder variable tracking and composition. You can
combine multiple builder expressions with `logical operators
<https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators>`__
and view the {+query-api+} translation in the information message.

Click the following tabs to see a composed builder variable with and without an
information message displayed:

.. tabs::

   .. tab:: Without Information Message
      :tabid: no-message-variable

      .. figure:: /includes/images/builder-variable.png
         :alt: Screenshot of builder expression variable in visual studio with ellipsis annotation.

   .. tab:: With Information Message
      :tabid: message-variable

      .. figure:: /includes/images/builder-variable-popup.png
         :alt: Screenshot of builder expression variable in visual studio with information message displayed.

.. include:: /includes/error-list-window.rst